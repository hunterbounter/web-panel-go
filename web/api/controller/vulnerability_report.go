package controller

import (
	"encoding/base64"
	"encoding/json"
	"github.com/gofiber/fiber/v2"
	"hunterbounter.com/web-panel/pkg/hunterbounter_json"
	"hunterbounter.com/web-panel/pkg/utils"
	"hunterbounter.com/web-panel/web/api/model"
	"log"
)

func VulnerabilityReportGET(c *fiber.Ctx) error {

	var vulnerabilityRecords = model.GetVulnerabilityReport()

	var fullJsonBase64 string

	var decodedAllData = make([]map[string]interface{}, 0)
	for _, record := range vulnerabilityRecords {
		fullJsonBase64 = utils.GetString(record["full_json"])
		decodedData, err := base64.StdEncoding.DecodeString(fullJsonBase64)
		if err != nil {
			log.Println(err)
		}
		var decodedJson map[string]interface{}
		err = json.Unmarshal(decodedData, &decodedJson)
		if err != nil {
			log.Println(err)
		}
		decodedJson["db_id"] = record["id"]
		decodedAllData = append(decodedAllData, decodedJson)

	}

	return RenderTemplate(c, "panel/vulnerability_report", fiber.Map{
		"Title":                "Vulnerability Report",
		"DecodedDataMap":       decodedAllData,
		"VulnerabilityRecords": vulnerabilityRecords,
	})

}

func VulnerabilityReportDetailGET(c *fiber.Ctx) error {

	id := c.Params("id")
	var vulnerabilityRecord = model.GetVulnerabilityById(id)

	fullJsonBase64 := utils.GetString(vulnerabilityRecord[0]["full_json"])
	decodedData, err := base64.StdEncoding.DecodeString(fullJsonBase64)

	var decodedJson map[string]interface{}
	err = json.Unmarshal(decodedData, &decodedJson)
	if err != nil {
		log.Println(err)
	}
	log.Println(hunterbounter_json.ToStringBeautify(decodedJson))
	return RenderTemplate(c, "panel/vulnerability_report_detail", fiber.Map{
		"Title":       "Vulnerability Report Detail",
		"DecodedData": fullJsonBase64,
	})

}

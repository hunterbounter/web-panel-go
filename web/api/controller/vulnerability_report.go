package controller

import (
	"encoding/base64"
	"encoding/json"
	"github.com/gofiber/fiber/v2"
	"html"
	"hunterbounter.com/web-panel/pkg/hunterbounter_json"
	"hunterbounter.com/web-panel/pkg/utils"
	"hunterbounter.com/web-panel/web/api/model"
	"log"
	"sort"
	"strings"
	"time"
)

func SortSliceMap(sliceMap []map[string]interface{}, key string, asc bool) {
	// Define the date format
	const dateFormat = "02.01.2006 15:04:05"

	sort.Slice(sliceMap, func(i, j int) bool {
		// Parse the date strings
		dateI, errI := time.Parse(dateFormat, sliceMap[i][key].(string))
		dateJ, errJ := time.Parse(dateFormat, sliceMap[j][key].(string))

		// Handle parsing errors (if any)
		if errI != nil || errJ != nil {
			return false
		}

		if asc {
			return dateI.Before(dateJ)
		} else {
			return dateI.After(dateJ)
		}
	})
}
func VulnerabilityReportGET(c *fiber.Ctx) error {

	var vulnerabilityRecords = model.GetVulnerabilityReportList()

	for _, record := range vulnerabilityRecords {
		// clean HTML entities
		oldName := utils.GetString(record["name"])
		newName := html.UnescapeString(oldName)

		newName = strings.ReplaceAll(newName, "&lt;", "")
		newName = strings.ReplaceAll(newName, "&gt;", "")
		newName = strings.ReplaceAll(newName, "&quot;", "")
		log.Println("Old Name: ", oldName, "New Name: ", newName)
		record["name"] = newName
	}

	var openvasCount, zapCount, nucleiCount int
	var highSeverityCount, mediumSeverityCount, lowSeverityCount int
	for _, record := range vulnerabilityRecords {
		severity := utils.GetString(record["severity"])
		if severity == "High" {
			highSeverityCount++
		} else if severity == "Medium" {
			mediumSeverityCount++
		} else if severity == "Low" {
			lowSeverityCount++
		}

		agent_type := utils.GetString(record["agent_type"])
		if agent_type == "openvas" {
			openvasCount++
		}
		if agent_type == "zap" {
			zapCount++
		}
		if agent_type == "nuclei" {
			nucleiCount++
		}

	}

	log.Println("High Severity: ", highSeverityCount, "Medium Severity: ", mediumSeverityCount, "Low Severity: ", lowSeverityCount)

	// tüm create_date alanlarını sırala tekrar sıralıyoruz

	//log.Println(len(vulnerabilityRecords))
	log.Println(hunterbounter_json.ToStringBeautify(vulnerabilityRecords))

	return RenderTemplate(c, "panel/vulnerability_report", fiber.Map{
		"Title":          "Vulnerability Report",
		"DecodedDataMap": vulnerabilityRecords,
		"HighSeverity":   highSeverityCount,
		"MediumSeverity": mediumSeverityCount,
		"LowSeverity":    lowSeverityCount,
		"OpenvasCount":   openvasCount,
		"ZapCount":       zapCount,
		"NucleiCount":    nucleiCount,
	})

}

func ZapReportDetailGET(c *fiber.Ctx) error {

	id := c.Params("id")
	var vulnerabilityRecord = model.GetZapVulnerabilityById(id)

	fullJsonBase64 := utils.GetString(vulnerabilityRecord[0]["full_json"])
	decodedData, err := base64.StdEncoding.DecodeString(fullJsonBase64)

	var decodedJson map[string]interface{}
	err = json.Unmarshal(decodedData, &decodedJson)
	if err != nil {
		log.Println(err)
	}
	log.Println(hunterbounter_json.ToStringBeautify(decodedJson))
	return RenderTemplate(c, "panel/vulnerability_report_detail", fiber.Map{
		"Title":       "Vulnerability Report Detail",
		"DecodedData": fullJsonBase64,
	})

}

func OpenVasReportDetailGET(c *fiber.Ctx) error {

	id := c.Params("id")
	var vulnerabilityRecord = model.GetOpenVASVulnerabilityById(id)

	fullJsonBase64 := utils.GetString(vulnerabilityRecord[0]["full_json"])
	decodedData, err := base64.StdEncoding.DecodeString(fullJsonBase64)

	var decodedJson map[string]interface{}
	err = json.Unmarshal(decodedData, &decodedJson)
	if err != nil {
		log.Println(err)
	}
	log.Println(hunterbounter_json.ToStringBeautify(decodedJson))
	return RenderTemplate(c, "panel/vulnerability_report_detail", fiber.Map{
		"Title":       "Vulnerability Report Detail",
		"DecodedData": fullJsonBase64,
	})

}

func NucleiReportDetailGET(c *fiber.Ctx) error {

	id := c.Params("id")
	var vulnerabilityRecord = model.GetNucleiVulnerabilityById(id)

	fullJsonBase64 := utils.GetString(vulnerabilityRecord[0]["full_json"])
	decodedData, err := base64.StdEncoding.DecodeString(fullJsonBase64)

	var decodedJson map[string]interface{}
	err = json.Unmarshal(decodedData, &decodedJson)
	if err != nil {
		log.Println(err)
	}
	log.Println(hunterbounter_json.ToStringBeautify(decodedJson))
	return RenderTemplate(c, "panel/vulnerability_report_detail", fiber.Map{
		"Title":       "Vulnerability Report Detail",
		"DecodedData": fullJsonBase64,
	})

}
